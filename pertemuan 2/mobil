#include <GLUT/glut.h>
#include <cmath>

void init() {
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-10.0, 10.0, -10.0, 10.0);
}

// aspal
void drawRoad() {
    glColor3f(0.2, 0.2, 0.2);
    glBegin(GL_POLYGON);
        glVertex2f(-10.0, -4.0);
        glVertex2f(10.0, -4.0);
        glVertex2f(10.0, -7.0);
        glVertex2f(-10.0, -7.0);
    glEnd();
    
    glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_LINES);
        for(float x = -9.0; x < 10.0; x += 2.0) {
            glVertex2f(x, -5.5);
            glVertex2f(x + 1.0, -5.5);
        }
    glEnd();
}

// pohon
void drawCloverTree(float x, float y, float size) {
    glColor3f(0.545, 0.271, 0.075);
        glBegin(GL_POLYGON);
            glVertex2f(x - 0.4 * size, y);
            glVertex2f(x + 0.4 * size, y);
            glVertex2f(x + 0.4 * size, y + 2.5 * size);
            glVertex2f(x - 0.4 * size, y + 2.5 * size);
        glEnd();
    
    glColor3f(0.133, 0.545, 0.133);
    
    float leafSize = size * 0.8;
    float centerX = x;
    float centerY = y + 2.8 * size;
    
    glBegin(GL_POLYGON);
    for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f(centerX + leafSize * cos(angle),
                  (centerY + leafSize) + leafSize * sin(angle));
    }
    glEnd();
    
    glBegin(GL_POLYGON);
    for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f((centerX + leafSize) + leafSize * cos(angle),
                  centerY + leafSize * sin(angle));
    }
    glEnd();
    
    glBegin(GL_POLYGON);
    for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f(centerX + leafSize * cos(angle),
                  (centerY - leafSize) + leafSize * sin(angle));
    }
    glEnd();
    
    glBegin(GL_POLYGON);
    for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f((centerX - leafSize) + leafSize * cos(angle),
                  centerY + leafSize * sin(angle));
    }
    glEnd();
}

// mobil
void drawCar() {
    glColor3f(0.6, 0.8, 0.9);
    glBegin(GL_POLYGON);
        glVertex2f(-6.0, -4.0);
        glVertex2f(6.0, -4.0);
        glVertex2f(6.0, -2.0);
        glVertex2f(-6.0, -2.0);
    glEnd();
    
    glBegin(GL_POLYGON);
        glVertex2f(-5.0, -2.0);
        glVertex2f(5.0, -2.0);
        glVertex2f(3.5, 0.0);
        glVertex2f(-3.5, 0.0);
    glEnd();
    
    glColor3f(1.0, 1.0, 1.0);
    
    glBegin(GL_POLYGON);
        glVertex2f(-3.0, -1.8);
        glVertex2f(-0.1, -1.8);
        glVertex2f(-0.1, -0.2);
        glVertex2f(-2.8, -0.2);
    glEnd();
    
    glBegin(GL_POLYGON);
        glVertex2f(0.1, -1.8);
        glVertex2f(3.0, -1.8);
        glVertex2f(2.8, -0.2);
        glVertex2f(0.1, -0.2);
    glEnd();
    
    glColor3f(0.1, 0.1, 0.1);
    
    glBegin(GL_POLYGON);
        for(int i = 0; i < 360; i += 5) {
        float angle = i * 3.14159 / 180;
        glVertex2f(-3.0 + 1.2 * cos(angle), -4.0 + 1.2 * sin(angle));
    }
    glEnd();
        
    glBegin(GL_POLYGON);
        for(int i = 0; i < 360; i += 5) {
        float angle = i * 3.14159 / 180;
        glVertex2f(3.0 + 1.2 * cos(angle), -4.0 + 1.2 * sin(angle));
    }
    glEnd();
        
    glColor3f(0.7, 0.7, 0.7);
    glBegin(GL_POLYGON);
        for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f(-3.0 + 0.5 * cos(angle), -4.0 + 0.5 * sin(angle));
    }
    glEnd();
        
    glBegin(GL_POLYGON);
        for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f(3.0 + 0.5 * cos(angle), -4.0 + 0.5 * sin(angle));
    }
    glEnd();
    
    // lampu depan
    glColor3f(1.0, 1.0, 0.0);
    glBegin(GL_POLYGON);
    for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f(-4.7 + 0.3 * cos(angle), -2.5 + 0.3 * sin(angle));
    }
    glEnd();
    
    // lampu belakang
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_POLYGON);
    for(int i = 0; i < 360; i += 10) {
        float angle = i * 3.14159 / 180;
        glVertex2f(4.7 + 0.3 * cos(angle), -2.5 + 0.3 * sin(angle));
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // background jalan
    drawRoad();
    
    // background pohon
    drawCloverTree(-8.0, -4.0, 1.0);
    drawCloverTree(-6.0, -4.0, 1.2);
    drawCloverTree(6.0, -4.0, 1.3);
    drawCloverTree(8.0, -4.0, 0.9);
    
    // mobil
    drawCar();
    
    glutSwapBuffers();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Mobil");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
